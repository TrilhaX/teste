local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Tempest Hub",
    LoadingTitle = "Tempest Hub",
    LoadingSubtitle = "by Trilha/Zhy",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = 'TempestHub', -- Create a custom folder for your hub/game
       FileName = "Tempest Hub(Lobby)"
    },
    Discord = {
       Enabled = true,
       Invite = "https://discord.gg/cW6JpmU79a", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })


 function deleteinfplayer()
    while getgenv().deleteinfplayer do
        local player = game.Players.LocalPlayer
        if not player then
            return
        end

        local head = player.Character and player.Character:FindFirstChild("Head")
        if not head then
            return
        end

        local overhead = head:FindFirstChild("_overhead")
        if not overhead then
            return
        end

        local frame = overhead:FindFirstChild("Frame")
        if not frame then
            return
        end

        frame:Destroy()
        
        wait(0.1) -- Adiciona um pequeno atraso entre as exclus√µes para evitar bloqueios
    end
end

function ared1()
    while getgenv().ared1 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function ared2()
    while getgenv().ared2 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_2"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function ared3()
    while getgenv().ared3 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_3"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function ared4()
    while getgenv().ared4 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_4"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end



function ared5()
    while getgenv().ared5 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_5"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function ared6()
    while getgenv().ared6 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString2 = "entertainment_district_level_6"
        local ohBoolean3 = false
        local ohString4 = "Hard"
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arwf1()
    while getgenv().arwf1 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_frieza_level_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arwf2()
    while getgenv().arwf2 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_frieza_level_2"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arwf3()
    while getgenv().arwf3 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_frieza_level_3"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arwf4()
    while getgenv().arwf4 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_frieza_level_4"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arwf5()
    while getgenv().arwf5 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_frieza_level_5"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function aru1()
    while getgenv().aru1 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "uchiha_level_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function aru2()
    while getgenv().aru2 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "uchiha_level_2"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function aru3()
    while getgenv().aru3 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "uchiha_level_3"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function aru4()
    while getgenv().aru4 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "uchiha_level_4"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function aru5()
    while getgenv().aru5 == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "uchiha_level_5"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end


function arw()
    while getgenv().arw == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "west_city_raid"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arit()
    while getgenv().arit == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)     
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "demonslayer_raid_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)   
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)            
    end
end

function arS()
    while getgenv().arS == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "aot_raid_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function arN()
    while getgenv().arN == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "naruto_raid_1"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end


function armhas()
    while getgenv().armhas == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "mha_stain"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end


function arms()
    while getgenv().arms == true do
        local ohString1 = "_lobbytemplate212"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)                    
        local ohString1 = "_lobbytemplate212"
        local ohString2 = "marineford_sengoku"
        local ohBoolean3 = false
        local ohString4 = "Hard"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(ohString1, ohString2, ohBoolean3, ohString4)
        local ohString1 = "_lobbytemplategreen211"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end


function dgA()
    while getgenv().dgA == true do
        local ohString1 = "_lobbytemplate_event322"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)
        local ohString1 = "_lobbytemplategreen322"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function dgA()
    while getgenv().dgCW == true do
        local ohString1 = "_lobbytemplate_event221"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)
        local ohString1 = "_lobbytemplategreen221"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end


function dgA()
    while getgenv().dgCP == true do
        local ohString1 = "_lobbytemplate_event22"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(ohString1)
        local ohString1 = "_lobbytemplategreen22"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(ohString1)
    end
end

function autochallenge()
    while getgenv().autochallenge == true do
        local args = {
            [1] = "_lobbytemplate320"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))        
    end
end

function autoDchallenge()
    while getgenv().autoDchallenge == true do
        local args = {
            [1] = "_lobbytemplate321"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))    
    end
end

function autoSummon()
    while getgenv().autoSummon == true do
        local ohString1 = "EventClover"
        local ohString2 = "gems10"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end


function autoSummon1()
    while getgenv().autoSummon1 == true do
        local ohString1 = "EventClover"
        local ohString2 = "gems"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end

function autosummonTicket()
    while getgenv().autosummonTicket == true do
        local ohString1 = "EventClover"
        local ohString2 = "ticket"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_from_banner:InvokeServer(ohString1, ohString2)
    end
end


function autobuycapsuleSummer1()
    while getgenv().autobuycapsuleSummer1 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "1"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end

function autobuycapsuleSummer10()
    while getgenv().autobuycapsuleSummer10 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "10"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end

function autobuycapsuleSummer100()
    while getgenv().autobuycapsuleSummer100 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = "event",
            [3] = "event_shop",
            [4] = "100"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.buy_item_generic:InvokeServer(unpack(args))
    end
end


function autoopencapsuleSummer1()
    while getgenv().autoopencapsuleSummer1 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = {
                ["use10"] = false
            }
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_item:InvokeServer(unpack(args))        
    end
end

function autoopencapsuleSummer10()
    while getgenv().autoopencapsuleSummer10 == true do
        wait(1)
        local args = {
            [1] = "capsule_summer",
            [2] = {
                ["use10"] = true
            }
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_item:InvokeServer(unpack(args))                         
    end
end

function autoclaimbp()
    while getgenv().autoclaimbp == true do
        wait(1)
        game:GetService("ReplicatedStorage").endpoints.client_to_server.claim_battlepass_rewards:InvokeServer()
    end
end

function autoquestoverlord()
    while getgenv().autoquestoverlord == true do
        wait(1)
        local args = {
            [1] = "overlord_daily"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.accept_npc_quest:InvokeServer(unpack(args))
    end
end

local toggle = false
    
local function autoreplay()
    while toggle do
    local ohString1 = "replay"

    game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1)
    end
end

local function autonext()
    while toggle do
        local args = {
            [1] = "next_story"
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(unpack(args))        
    end
end

local function autoleave()
    while toggle do
        local ohString1 = "leave"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1)
    end
end

local function autostart()
    while getgenv().autostart == true do
        game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_start:InvokeServer()
    end
end

local function autoskipwave()
    while getgenv().autoskipwave == true do
        game:GetService("ReplicatedStorage").endpoints.client_to_server.vote_wave_skip:InvokeServer()
    end
end

local function autoleave()
    while toggle do
        local ohString1 = "leave"

        game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1)
    end
end

function autotplobby()
    while getgenv().autotplobby == true do
    wait(10)    
    game:GetService("TeleportService"):Teleport(8304191830, LocalPlayer)
    end
end

function autogojoskill()
    while getgenv().autogojoskill == true do
        local args = {
            [1] = workspace._UNITS.gojo_evolved
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_active_attack:InvokeServer(unpack(args))
    end
end

function autohomuraskill()
    while getgenv().autohomuraskill == true do
        local args = {
            [1] = workspace._UNITS.homura
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.use_active_attack:InvokeServer(unpack(args))        
    end
end


-- Define the auto-sell functions
function autosellfarm5()
    while getgenv().autosellfarm5 == true do
        local args = {
            [1] = workspace._UNITS.speedwagon
        }
        
        game:GetService("ReplicatedStorage").endpoints.client_to_server.sell_unit_ingame:InvokeServer(unpack(args))
    end
end


function pickportalsummer()
    while getgenv().pickportalsummer == true do
 local portalSummer = game:GetService("ReplicatedStorage")._FX_CACHE.portal_summer
 local valor = portalSummer._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a fun√ß√£o com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 print(Picked_Portal)
 end
 end
 

 function pickportaleclipse()
    while getgenv().pickportaleclipse == true do
 local portal_item__eclipse = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__eclipse
 local valor = portal_item__eclipse._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a fun√ß√£o com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 print(Picked_Portal)
 end
 end
 


 function pickportalsds()
    while getgenv().pickportalsds == true do
 local portal_zeldris = game:GetService("ReplicatedStorage")._FX_CACHE.portal_zeldris
 local valor = portal_zeldris._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a fun√ß√£o com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 print(Picked_Portal)
 end
 end
 


 function pickportaldressrosa()
    while getgenv().pickportaldressrosa == true do
 local portal_item__dressrosa = game:GetService("ReplicatedStorage")._FX_CACHE.portal_item__dressrosa
 local valor = portal_item__dressrosa._uuid_or_id.Value
 
 local ohString1 = "Items"
 local ohNumber2 = 0
 
 game:GetService("ReplicatedStorage").endpoints.client_to_server.save_notifications_state:InvokeServer(ohString1, ohNumber2)
 -- Defina a string ohString1
 local ohString1 = "replay"
 local ohTable2 = {
     ["item_uuid"] = valor  -- Substitua "{uuidOrId}" pelo valor real de uuidOrId
 }
 
 -- Chame a fun√ß√£o com os valores atualizados
 game:GetService("ReplicatedStorage").endpoints.client_to_server.set_game_finished_vote:InvokeServer(ohString1, ohTable2)
 print(Picked_Portal)
 end
 end


local function deleteinfplayer()
    while toggle do
        local player = game.Players.LocalPlayer
        if not player then
            return
        end

        local head = player.Character and player.Character:FindFirstChild("Head")
        if not head then
            return
        end

        local overhead = head:FindFirstChild("_overhead")
        if not overhead then
            return
        end

        local frame = overhead:FindFirstChild("Frame")
        if not frame then
            return
        end

        frame:Destroy()

        wait(0.1)
    end
end

local function deletemap()
    while toggle do
        if workspace["_map"] then
            workspace["_map"]:Destroy()
        end
        if workspace["_BASES"] then
            workspace["_BASES"]:Destroy()
        end
        if workspace["_water_blocks"] then
            workspace["_water_blocks"]:Destroy()
        end
        print("Deleted objects.")
    end
end

local function UseActiveAttackE()
    local goat = game.Players.LocalPlayer
    local erwin1 = {}

    while toggle do
        erwin1 = {}

        for _, v in pairs(game:GetService("Workspace")._UNITS:GetChildren()) do
            if v.Name == 'erwin' and v._stats.player.Value == goat then
                table.insert(erwin1, v)
            end
        end

        if #erwin1 >= 4 then
            for i, erwin in ipairs(erwin1) do
                if not toggle then
                    break
                end

                local endpoints = game:GetService("ReplicatedStorage"):WaitForChild("endpoints")
                local client_to_server = endpoints:WaitForChild("client_to_server")
                local use_active_attack = client_to_server:WaitForChild("use_active_attack")

                use_active_attack:InvokeServer(erwin)
                wait(15.4)
            end
        end
        wait()
    end
end

-- Define a function for checking the number of "wendys" in wendy1
local function CheckWendyCount(wendy1)
    return #wendy1 == 4
end

-- Main function for using active attack when there are 4 "wendys"
local function UseActiveAttackW()
    while true do
        -- Clear the wendy1 table
        local wendy1 = {}
        
        -- Populate the wendy1 table with "wendys" owned by the LocalPlayer
        local goat = game.Players.LocalPlayer
        for _, v in pairs(game:GetService("Workspace")._UNITS:GetChildren()) do
            if v.Name == 'wendy' and v._stats.player.Value == goat then
                table.insert(wendy1, v)
            end
        end
        
        -- Use active attack on the "wendys" when there are 4 of them
        while #wendy1 == 4 do
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("use_active_attack"):InvokeServer(wendy1[1])
            wait(15.5)
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("use_active_attack"):InvokeServer(wendy1[3])
            wait(15.5)
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("use_active_attack"):InvokeServer(wendy1[2])
            wait(15.5)
            game:GetService("ReplicatedStorage"):WaitForChild("endpoints"):WaitForChild("client_to_server"):WaitForChild("use_active_attack"):InvokeServer(wendy1[4])
            wait(15.5)
        end
        
        -- Pause briefly before checking again
        wait(1)
    end
end

 local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Hide Name")

 local Toggle = Tab:CreateToggle({
    Name = "Hide Name",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().deleteinfplayer = Value
    deleteinfplayer()
    end,
 })

 local Section = Tab:CreateSection("Delete Map")
    
 local Toggle1 = Tab:CreateToggle({
     Name = "Delete Map",
     CurrentValue = false,
     Flag = "Toggle2",
     Callback = function(Value)
         toggle = Value
         getgenv().deletemap = Value
         deletemap()
     end,
 })

 local Section = Tab:CreateSection("Auto Replay|Leave|Next")
    
 local Toggle1 = Tab:CreateToggle({
     Name = "Auto Replay",
     CurrentValue = false,
     Flag = "Toggle3",
     Callback = function(Value)
         toggle = Value
         getgenv().autoreplay = Value
         autoreplay()
     end,
 })
 
 local Toggle1 = Tab:CreateToggle({
     Name = "Auto Leave",
     CurrentValue = false,
     Flag = "Toggle4",
     Callback = function(Value)
         toggle = Value
         getgenv().autoleave = Value
         autoleave()
     end,
 })
 
 local Toggle1 = Tab:CreateToggle({
     Name = "Auto Next",
     CurrentValue = false,
     Flag = "Toggle5",
     Callback = function(Value)
         toggle = Value
         getgenv().autonext = Value
         autonext()
     end,
 })

 local Toggle1 = Tab:CreateToggle({
    Name = "Auto Start",
    CurrentValue = false,
    Flag = "autostart",
    Callback = function(Value)
        toggle = Value
        getgenv().autostart = Value
        autostart()
    end,
})

local Toggle1 = Tab:CreateToggle({
    Name = "Auto Skip Wave",
    CurrentValue = false,
    Flag = "autoskipwave",
    Callback = function(Value)
        toggle = Value
        getgenv().autoskipwave = Value
        autoskipwave()
    end,
})

local Section = Tab:CreateSection("Auto Sell")


local Toggle1 = Tab:CreateToggle({
    Name = "Auto Sell Farm (Insta Sell)",
    CurrentValue = false,
    Flag = "autosellfarm5",
    Callback = function(Value)
        toggle = Value
        getgenv().autosellfarm5 = Value
        autosellfarm5()
    end,
})


 local Tab = Window:CreateTab("Raid", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Entertainment District")

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 1)",
    CurrentValue = false,
    Flag = "Toggle6", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared1 = Value
    ared1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 2)",
    CurrentValue = false,
    Flag = "Toggle7", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared2 = Value
    ared2()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 3)",
    CurrentValue = false,
    Flag = "Toggle8", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared3 = Value
    ared3()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 4)",
    CurrentValue = false,
    Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared4 = Value
    ared4()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 5)",
    CurrentValue = false,
    Flag = "Toggle10", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared5 = Value
    ared5()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Entertainment District (Stage 6)",
    CurrentValue = false,
    Flag = "Toggle11", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().ared6 = Value
    ared6()
    end,
 })

 local Section = Tab:CreateSection("West City (Freeza Invasion)")

 local Toggle = Tab:CreateToggle({
    Name = "West City (Stage 1)",
    CurrentValue = false,
    Flag = "Toggle12", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arwf1 = Value
    arwf1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "West City (Stage 2)",
    CurrentValue = false,
    Flag = "Toggle13", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arwf2 = Value
    arwf2()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "West City (Stage 3)",
    CurrentValue = false,
    Flag = "Toggle14", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arwf3 = Value
    arwf3()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "West City (Stage 4)",
    CurrentValue = false,
    Flag = "Toggle15", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arwf4 = Value
    arwf4()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "West City (Stage 5)",
    CurrentValue = false,
    Flag = "Toggle16", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arwf5 = Value
    arwf5()
    end,
 })

 local Section = Tab:CreateSection("Storm Hideout")

 local Toggle = Tab:CreateToggle({
    Name = "Storm Hideout (Stage 1)",
    CurrentValue = false,
    Flag = "Toggle17", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().aru1 = Value
    aru1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Storm Hideout (Stage 2)",
    CurrentValue = false,
    Flag = "Toggle18", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().aru2 = Value
    aru2()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Storm Hideout (Stage 3)",
    CurrentValue = false,
    Flag = "Toggle19", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().aru3 = Value
    aru3()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Storm Hideout (Stage 4)",
    CurrentValue = false,
    Flag = "Toggle20", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().aru4 = Value
    aru4()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Storm Hideout (Stage 5)",
    CurrentValue = false,
    Flag = "Toggle21", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().aru5 = Value
    aru5()
    end,
 })

 local Section = Tab:CreateSection("Alternative Raids")

 local Toggle = Tab:CreateToggle({
    Name = "Naruto Raid",
    CurrentValue = false,
    Flag = "Toggle22", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arN = Value
    arN()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Infinity Train",
    CurrentValue = false,
    Flag = "Toggle23", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arit = Value
    arit()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "West City",
    CurrentValue = false,
    Flag = "Toggle24", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arw = Value
    arw()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Shingeki Raid",
    CurrentValue = false,
    Flag = "Toggle25", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arS = Value
    arS()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Stain Raid",
    CurrentValue = false,
    Flag = "Toggle26", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().armhas = Value
    armhas()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Marine Ford Raid",
    CurrentValue = false,
    Flag = "Toggle27", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().arms = Value
    arms()
    end,
 })

 local Tab = Window:CreateTab("Dungeon", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Dungeon")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Dungeon Anniversary",
    CurrentValue = false,
    Flag = "Toggle28", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().dgA = Value
    dgA()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Dungeon Cursed Womb",
    CurrentValue = false,
    Flag = "Toggle29", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().dgCW = Value
    dgCW()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Dungeon Cursed Parade",
    CurrentValue = false,
    Flag = "Toggle30", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().dgCP = Value
    dgCP()
    end,
 })

 local Tab = Window:CreateTab("Challenge", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Challenge")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Challenge",
    CurrentValue = false,
    Flag = "autochallenge", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autochallenge = Value
    autochallenge()
    end,
 })

 local Section = Tab:CreateSection("Daily Challenge")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Daily Challenge",
    CurrentValue = false,
    Flag = "autoDchallenge", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoDchallenge = Value
    autoDchallenge()
    end,
 })

 local Tab = Window:CreateTab("Story", 4483362458) -- Title, Image

    local function selectMap(mapName)
        local args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_join_lobby:InvokeServer(unpack(args))
        local args = {
            [1] = "_lobbytemplategreen1",
            [2] = mapName,
            [3] = false,
            [4] = "Normal"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_lock_level:InvokeServer(unpack(args))
        wait(1)
        local args = {
            [1] = "_lobbytemplategreen1"
        }

        game:GetService("ReplicatedStorage").endpoints.client_to_server.request_start_game:InvokeServer(unpack(args))
        print("Selected map: " .. mapName)
    end

    local mapSections = {
        ["Naruto Maps"] = {
            "naruto_level_1",
            "naruto_level_2",
            "naruto_level_3",
            "naruto_level_4",
            "naruto_level_5",
            "naruto_level_6"
        },
        ["Demon Slayer Maps"] = {
            "demonslayer_level_1",
            "demonslayer_level_2",
            "demonslayer_level_3",
            "demonslayer_level_4",
            "demonslayer_level_5",
            "demonslayer_level_6"
        },
        ["AOT Maps"] = {
            "aot_level_1",
            "aot_level_2",
            "aot_level_3",
            "aot_level_4",
            "aot_level_5",
            "aot_level_6"
        },
        ["Namek Maps"] = {
            "namek_level_1",
            "namek_level_2",
            "namek_level_3",
            "namek_level_4",
            "namek_level_5",
            "namek_level_6"
        },
        ["Marine Ford Maps"] = {
            "marineford_level_1",
            "marineford_level_2",
            "marineford_level_3",
            "marineford_level_4",
            "marineford_level_5",
            "marineford_level_6"
        },
        ["Tokyo Ghoul Maps"] = {
            "tokyoghoul_level_1",
            "tokyoghoul_level_2",
            "tokyoghoul_level_3",
            "tokyoghoul_level_4",
            "tokyoghoul_level_5",
            "tokyoghoul_level_6"
        },
        ["Hollow Maps"] = {
            "hueco_level_1",
            "hueco_level_2",
            "hueco_level_3",
            "hueco_level_4",
            "hueco_level_5",
            "hueco_level_6"
        },
        ["HxH Maps"] = {
            "hxhant_level_1",
            "hxhant_level_2",
            "hxhant_level_3",
            "hxhant_level_4",
            "hxhant_level_5",
            "hxhant_level_6"
        },
        ["Fairy Tail Maps"] = {
            "magnolia_level_1",
            "magnolia_level_2",
            "magnolia_level_3",
            "magnolia_level_4",
            "magnolia_level_5",
            "magnolia_level_6"
        },
        ["JJK Maps"] = {
            "jjk_level_1",
            "jjk_level_2",
            "jjk_level_3",
            "jjk_level_4",
            "jjk_level_5",
            "jjk_level_6"
        },
        ["Clover Maps"] = {
            "clover_level_1",
            "clover_level_2",
            "clover_level_3",
            "clover_level_4",
            "clover_level_5",
            "clover_level_6"
        },
        ["Jojo Maps"] = {
            "jojo_level_1",
            "jojo_level_2",
            "jojo_level_3",
            "jojo_level_4",
            "jojo_level_5",
            "jojo_level_6"
        },
        ["Opm Maps"] = {
            "opm_level_1",
            "opm_level_2",
            "opm_level_3",
            "opm_level_4",
            "opm_level_5",
            "opm_level_6"
        },
        ["7ds Maps"] = {
            "7ds_level_1",
            "7ds_level_2",
            "7ds_level_3",
            "7ds_level_4",
            "7ds_level_5",
            "7ds_level_6"
        },
        ["mha Maps"] = {
            "mha_level_1",
            "mha_level_2",
            "mha_level_3",
            "mha_level_4",
            "mha_level_5",
            "mha_level_6"
        },
        ["dressrosa Maps"] = {
            "dressrosa_level_1",
            "dressrosa_level_2",
            "dressrosa_level_3",
            "dressrosa_level_4",
            "dressrosa_level_5",
            "dressrosa_level_6"
        },
        ["Sao Maps"] = {
            "sao_level_1",
            "sao_level_2",
            "sao_level_3",
            "sao_level_4",
            "sao_level_5",
            "sao_level_6"
        },
        ["Berserk Maps"] = {
            "berserk_level_1",
            "berserk_level_2",
            "berserk_level_3",
            "berserk_level_4",
            "berserk_level_5",
            "berserk_level_6"
        },
        ["Overlord Maps"] = {
            "overlord_level_1",
            "overlord_level_2",
            "overlord_level_3",
            "overlord_level_4",
            "overlord_level_5",
            "overlord_level_6"
        },
    }

    for mapGroup, mapNames in pairs(mapSections) do
        local Section = Tab:CreateSection(mapGroup)

        for i, mapName in ipairs(mapNames) do
            Tab:CreateToggle({
                Name = mapName,
                CurrentValue = false,
                Flag = mapName, -- Usando o nome do mapa como flag para garantir unicidade
                Callback = function(Value)
                    if Value then
                        selectMap(mapName)
                    end
                end
            })
        end
    end

    local Tab2 = Window:CreateTab("Auto Buff", 4483362458)
    
    local Section2 = Tab2:CreateSection("Auto Buff Erwin")
    
    local Toggle2 = Tab2:CreateToggle({
        Name = "Auto Buff Erwin (Without SPA Curse)",
        CurrentValue = false,
        Flag = "Toggle31",
        Callback = function(Value)
            toggle = Value
            if toggle then
                UseActiveAttackE()
            end
        end,
    })
    
    local Section3 = Tab2:CreateSection("Auto Buff Wenda")
    
    local Toggle3 = Tab2:CreateToggle({
        Name = "Auto Buff Wenda (Without SPA Curse)",
        CurrentValue = false,
        Flag = "Toggle32",
        Callback = function(Value)
            toggle = Value
            if toggle then
                UseActiveAttackW()
            end
        end,
    })

    
 local Tab = Window:CreateTab("Auto Portal", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Auto Pick Portal")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Pick Eclipe Portal",
    CurrentValue = false,
    Flag = "pickeclipseportal", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().pickportaleclipse = Value
    pickportaleclipse()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Pick Dressrosa Portal",
    CurrentValue = false,
    Flag = "pickdressrosaportal", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().pickportaldressrosa = Value
    pickportaldressrosa()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Pick 7ds Portal",
    CurrentValue = false,
    Flag = "pick7dsportal", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().pickportalsds = Value
    pickportalsds()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Pick Summer Portal",
    CurrentValue = false,
    Flag = "pickAutoOpenSummerPortal", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().pickportalsummer = Value
    pickportalsummer()
    end,
 })

 local Tab = Window:CreateTab("Auto Quest", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Overlord Quest")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Get Quest Overlord",
    CurrentValue = false,
    Flag = "Toggle33", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoquestoverlord = Value
    autoquestoverlord()
    end,
 })

 local Tab = Window:CreateTab("Auto Hability", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Auto Hability")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Gojo Skill",
    CurrentValue = false,
    Flag = "Auto Hability", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autogojoskill = Value
    autogojoskill()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Homura Skill",
    CurrentValue = false,
    Flag = "autohomuraskill", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autohomuraskill = Value
    autohomuraskill()
    end,
 })

 local Tab = Window:CreateTab("Shop", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Summon")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Summon (Only 10 Roll)",
    CurrentValue = false,
    Flag = "Toggle34", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoSummon = Value
    autoSummon()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Summon (Only 1 Roll)",
    CurrentValue = false,
    Flag = "Toggle35", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoSummon1 = Value
    autoSummon1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Summon (Only Ticket Summon)",
    CurrentValue = false,
    Flag = "Toggle36", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autosummonTicket = Value
    autosummonTicket()
    end,
 })

 local Section = Tab:CreateSection("Summer Event")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Buy Capsule (Only 1)",
    CurrentValue = false,
    Flag = "Toggle37", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autobuycapsuleSummer1 = Value
    autobuycapsuleSummer1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Buy Capsule (Only 10)",
    CurrentValue = false,
    Flag = "Toggle38", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autobuycapsuleSummer10 = Value
    autobuycapsuleSummer10()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Buy Capsule (Only 100)",
    CurrentValue = false,
    Flag = "Toggle39", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autobuycapsuleSummer100 = Value
    autobuycapsuleSummer100()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Capsule (Only 1)",
    CurrentValue = false,
    Flag = "Toggle40", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoopencapsuleSummer1 = Value
    autoopencapsuleSummer1()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Auto Open Capsule (Only 10)",
    CurrentValue = false,
    Flag = "Toggle41", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoopencapsuleSummer10 = Value
    autoopencapsuleSummer10()
    end,
 })
     
 local Tab = Window:CreateTab("Misc", 4483362458) -- Title, Image

 local Section = Tab:CreateSection("Misc")

 local Toggle = Tab:CreateToggle({
    Name = "Auto Claim BattlePass",
    CurrentValue = false,
    Flag = "Toggle42", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autoclaimbp = Value
    autoclaimbp()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Tp to Lobby(Wait 10 seconds)",
    CurrentValue = false,
    Flag = "Toggle43", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
    getgenv().autotplobby = Value
    autotplobby()
    end,
 })

 for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
